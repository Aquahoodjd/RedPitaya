################################################################################
# versioning system
################################################################################

VER := $(shell cat apps-tools/ecosystem/info/info.json | grep version | sed -e 's/.*:\ *\"//' | sed -e 's/-.*//')
BUILD_NUMBER ?= 0

GIT_MODE ?= GITHUB
GITLAB_TOKEN ?= 

REVISION ?= $(shell git rev-parse --short HEAD)
VERSION = $(VER)-$(BUILD_NUMBER)-$(REVISION)
export BUILD_NUMBER
export REVISION
export VERSION

SUBMODULE_UBT = "redpitaya-v2016.4"
SUBMODULE_LIN = "branch-redpitaya-v2017.2"
SUBMODULE_APP = ""

STREAMING ?= MASTER

define GREET_MSG
##############################################################################
# Red Pitaya GNU/Linux Ecosystem
# Version: $(VER)
# Build: $(BUILD_NUMBER)
# Branch: $(GIT_LOCAL_BRANCH)
# Commit: $(GIT_COMMIT)
# U-Boot: $(SUBMODULE_UBT)
# Linux Kernel: $(SUBMODULE_LIN)
# Pro Applications: $(SUBMODULE_APP)
##############################################################################
endef
export GREET_MSG

################################################################################
# targets
################################################################################

all: fpga devicetree u-boot linux boot

install: linux-install devicetree-install boot

################################################################################
#
################################################################################

# check if download cache directory is available
DL          ?= dl
TMP          = tmp
INSTALL_DIR  = build

$(DL):
	mkdir -p $@

$(TMP):
	mkdir -p $@

$(INSTALL_DIR):
	mkdir -p $@

################################################################################
# X86 build (Vivado FPGA synthesis, FSBL, devicetree, U-Boot, Linux kernel)
################################################################################

UBOOT_TAG     = redpitaya-v2016.4.1
LINUX_TAG     = branch-redpitaya-v2017.2
DTREE_TAG     = xilinx-v2017.2

UBOOT_DIR     = $(TMP)/u-boot-xlnx-$(UBOOT_TAG)
LINUX_DIR     = $(TMP)/linux-xlnx-$(LINUX_TAG)
DTREE_DIR     = $(TMP)/device-tree-xlnx-$(DTREE_TAG)

UBOOT_TAR     = $(DL)/u-boot-xlnx-$(UBOOT_TAG).tar.gz
LINUX_TAR     = $(DL)/linux-xlnx-$(LINUX_TAG).tar.gz
DTREE_TAR     = $(DL)/device-tree-xlnx-$(DTREE_TAG).tar.gz

# it is possible to use an alternative download location (local) by setting environment variables
UBOOT_URL     ?= https://github.com/RedPitaya/u-boot-xlnx/archive/$(UBOOT_TAG).tar.gz
LINUX_URL     ?= https://github.com/RedPitaya/linux-xlnx/archive/$(LINUX_TAG).tar.gz
DTREE_URL     ?= https://github.com/Xilinx/device-tree-xlnx/archive/$(DTREE_TAG).tar.gz

LINUX_CFLAGS = "-O2 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard"
UBOOT_CFLAGS = "-O2 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard"

KERNEL_HEADERS ?= YES

################################################################################
# FPGA build provides: $(FSBL), $(FPGA), $(DEVICETREE).
################################################################################

HWID ?=
DEF_PARAM ?=

# stream_app
FPGA_STREAM_APP=

# stream_app_250
FPGA_STREAM_APP_250=

# classic
FPGA_CLASSIC=

# logic
FPGA_LOGIC=

# logic_250
FPGA_LOGIC_250=

# v0.94
FPGA_0_94=

# v0.94_250
FPGA_0_94_250=

# mercury
FPGA_MERCURY=

# axi4lite
FPGA_AXI4LITE=


ifeq ($(MODEL),Z10)
ifeq ($(STREAMING),MASTER)
# FPGA_PRJ_LST = stream_app classic logic v0.94 mercury axi4lite

FPGA_STREAM_APP = 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_CLASSIC 	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_LOGIC	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_0_94	= 76cfba3fb0616f1e712af77a7532bb34b85ac17d
FPGA_MERCURY	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_AXI4LITE	= 748304679bc649f4f54b39dc88d42c84de55f17a

# NEED for FSBL fpga image
FPGA_PRJ = logic
FPGA_MODEL ?= Z10
DTS_PATH = dts
endif
endif

ifeq ($(MODEL),Z20)
ifeq ($(STREAMING),MASTER)
# FPGA_PRJ_LST = v0.94 stream_app

FPGA_STREAM_APP = 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_0_94	= 76cfba3fb0616f1e712af77a7532bb34b85ac17d

# NEED for FSBL fpga image
FPGA_PRJ = v0.94
FPGA_MODEL ?= Z20
DTS_PATH = dts
endif
endif

ifeq ($(MODEL),Z20_125)
ifeq ($(STREAMING),MASTER)
# FPGA_PRJ_LST = stream_app classic logic v0.94 mercury axi4lite

FPGA_STREAM_APP = 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_CLASSIC 	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_LOGIC	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_0_94	= 76cfba3fb0616f1e712af77a7532bb34b85ac17d
FPGA_MERCURY	= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_AXI4LITE	= 748304679bc649f4f54b39dc88d42c84de55f17a

# NEED for FSBL fpga image
FPGA_PRJ = logic
FPGA_MODEL ?= Z20_14
DTS_PATH = dts
endif
endif

ifeq ($(MODEL),Z20_250_12) 
ifeq ($(STREAMING),MASTER)
# FPGA_PRJ_LST = stream_app_250 v0.94_250 logic_250

FPGA_STREAM_APP_250 = 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_0_94_250		= 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_LOGIC_250		= 748304679bc649f4f54b39dc88d42c84de55f17a

# NEED for FSBL fpga image
FPGA_PRJ = logic
FPGA_MODEL ?= Z20_250
DTS_PATH = dts_250
endif
endif

ifeq ($(MODEL),Z10)
ifeq ($(STREAMING),SLAVE)
# FPGA_PRJ_LST = stream_app logic

FPGA_STREAM_APP = 748304679bc649f4f54b39dc88d42c84de55f17a
FPGA_LOGIC		= 748304679bc649f4f54b39dc88d42c84de55f17a

# NEED for FSBL fpga image
FPGA_PRJ = logic
FPGA_MODEL ?= Z10
DTS_PATH = dts
DEF_PARAM = SLAVE
endif
endif

.PHONY: fpga $(INSTALL_DIR)/fpga

fpga: $(INSTALL_DIR)/fpga


define build_fpga
	./download_fpga.sh $(1) $(GIT_MODE) $(5) $(GITLAB_TOKEN)
	mkdir -p $(INSTALL_DIR)/fpga/$(1)
	make -C fpga/$(1) PRJ=$(1) MODEL=$(2) DEFINES=$(3) HWID=$(4)
	
	cp    fpga/$(1)/prj/$(1)/out/red_pitaya.bit       $(INSTALL_DIR)/fpga/$(1)/fpga.bit
	cp    fpga/$(1)/prj/$(1)/sdk/fsbl/executable.elf  $(INSTALL_DIR)/fpga/$(1)/fsbl.elf
	cp -r fpga/$(1)/prj/$(1)/sdk/dts                  $(INSTALL_DIR)/fpga/$(1)
	cp    fpga/$(1)/prj/$(1)/dts/*                    $(INSTALL_DIR)/fpga/$(1)/dts/
	tools/dtc/dtc -@ -I dts -O dtb -o $(INSTALL_DIR)/fpga/$(1)/fpga.dtbo -i fpga/$(1)/prj/$(1)/dts -i fpga/$(1)/dts fpga/$(1)/prj/$(1)/dts/fpga.dtso
endef

$(INSTALL_DIR)/fpga: $(DTREE_DIR)
	mkdir -p $(INSTALL_DIR)/fpga

ifneq "$(FPGA_STREAM_APP)" ""
	$(call build_fpga,stream_app,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_STREAM_APP))
endif

ifneq "$(FPGA_STREAM_APP_250)" ""
	$(call build_fpga,stream_app_250,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_STREAM_APP_250))
endif

ifneq "$(FPGA_CLASSIC)" ""
	$(call build_fpga,classic,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_CLASSIC))
endif

ifneq "$(FPGA_LOGIC)" ""
	$(call build_fpga,logic,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_LOGIC))
endif

ifneq "$(FPGA_LOGIC_250)" ""
	$(call build_fpga,logic_250,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_LOGIC_250))
endif

ifneq "$(FPGA_0_94)" ""
	$(call build_fpga,v0.94,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_0_94))
endif

ifneq "$(FPGA_0_94_250)" ""
	$(call build_fpga,v0.94_250,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_0_94_250))
endif

ifneq "$(FPGA_MERCURY)" ""
	$(call build_fpga,mercury,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_MERCURY))
endif

ifneq "$(FPGA_AXI4LITE)" ""
	$(call build_fpga,axi4lite,$(MODEL),$(DEF_PARAM),$(HWID),$(FPGA_AXI4LITE))
endif

ifneq ($(STREAMING),SLAVE)
	# copy archived FPGA bitstream images and decompress them
	cp fpga/archive/*.xz  $(INSTALL_DIR)/fpga
	cd                    $(INSTALL_DIR)/fpga; xz -df *.xz
	# backward compatibility, TODO, should be removed at next OS release

ifneq ($(FPGA_MODEL),Z20_250)
	cp $(INSTALL_DIR)/fpga/v0.94/fpga.bit    $(INSTALL_DIR)/fpga/fpga_0.94.bit
	cp $(INSTALL_DIR)/fpga/stream_app/fpga.bit  $(INSTALL_DIR)/fpga/fpga_streaming.bit
ifeq ($(FPGA_MODEL), Z10)
	cp $(INSTALL_DIR)/fpga/logic/fpga.bit    $(INSTALL_DIR)/fpga/fpga_la.bit
	cp $(INSTALL_DIR)/fpga/classic/fpga.bit  $(INSTALL_DIR)/fpga/fpga_classic.bit
endif
ifeq ($(FPGA_MODEL), Z20_14)
	cp $(INSTALL_DIR)/fpga/logic/fpga.bit    $(INSTALL_DIR)/fpga/fpga_la.bit
	cp $(INSTALL_DIR)/fpga/classic/fpga.bit  $(INSTALL_DIR)/fpga/fpga_classic.bit
endif
else
	cp $(INSTALL_DIR)/fpga/logic_250/fpga.bit    $(INSTALL_DIR)/fpga/fpga_la.bit
	cp $(INSTALL_DIR)/fpga/stream_app_250/fpga.bit  $(INSTALL_DIR)/fpga/fpga_streaming.bit
	cp $(INSTALL_DIR)/fpga/v0.94_250/fpga.bit    $(INSTALL_DIR)/fpga/fpga_0.94.bit
	mv $(INSTALL_DIR)/fpga/v0.94_250 $(INSTALL_DIR)/fpga/v0.94
	mv $(INSTALL_DIR)/fpga/logic_250 $(INSTALL_DIR)/fpga/logic
endif
else
	cp $(INSTALL_DIR)/fpga/stream_app/fpga.bit  $(INSTALL_DIR)/fpga/fpga_streaming.bit
endif

################################################################################
# U-Boot build provides: $(UBOOT)
################################################################################

UBOOT           = $(TMP)/u-boot.elf

UBOOT_SCRIPT    = $(INSTALL_DIR)/u-boot.scr

.PHONY: u-boot

u-boot: $(UBOOT) $(UBOOT_SCRIPT)

$(UBOOT_TAR): | $(DL)
	curl -L $(UBOOT_URL) -o $@

$(UBOOT_DIR): $(UBOOT_TAR)
	mkdir -p $@
	tar -zxf $< --strip-components=1 --directory=$@

	# Patch
	patch -t -p0 -i "${PWD}/patches/u-boot/set-extra-env.patch" -d "$@"

$(UBOOT): $(UBOOT_DIR) $(TMP)
	make -C $< arch=ARM zynq_red_pitaya_defconfig
	make -C $< arch=ARM CFLAGS=$(UBOOT_CFLAGS)
	cp $(UBOOT_DIR)/u-boot $@

$(UBOOT_SCRIPT): $(INSTALL_DIR) $(UBOOT_DIR) $(UBOOT)
	$(UBOOT_DIR)/tools/mkimage -A ARM -O linux -T script -C none -a 0 -e 0 -n "boot Debian" -d patches/u-boot/u-boot.script $@

################################################################################
# Linux build provides: $(LINUX)
################################################################################

LINUX = $(LINUX_DIR)/arch/arm/boot/uImage

.PHONY: linux linux-install $(LINUX_DIR) $(LINUX)

linux: $(LINUX)

$(LINUX_TAR): | $(DL)
	curl -L $(LINUX_URL) -o $@

$(LINUX_DIR): $(LINUX_TAR)
	mkdir -p $@
	tar -zxf $< --strip-components=1 --directory=$@
	patch -t -p1 -i "${PWD}/patches/zynq-kernel-mempry-reserve-issue.patch" -d "${PWD}/$@"
	patch -t -p1 -i "${PWD}/patches/zynq-kernel-i2c.patch" -d "${PWD}/$@"
	patch -t -p1 -i "${PWD}/patches/xilinx_zynq_defconfig.patch" -d "${PWD}/$@" # patch for Wifi AP mode
ifeq ($(MODEL),Z20_250_12)
	patch -t -p1 -i "${PWD}/patches/zynq-kernel-lantiq_250_12.patch" -d "${PWD}/$@"
endif

$(LINUX): $(LINUX_DIR)
	make -C $< mrproper
	make -C $< ARCH=arm xilinx_zynq_defconfig
	make -C $< ARCH=arm CFLAGS=$(LINUX_CFLAGS) -j $(shell grep -c ^processor /proc/cpuinfo) UIMAGE_LOADADDR=0x8000 uImage
ifeq ($(KERNEL_HEADERS),YES)
	make -C $< headers_install ARCH=arm INSTALL_HDR_PATH=$(abspath $(INSTALL_DIR))/include/linux
endif

linux-install: $(INSTALL_DIR)
	cp $(LINUX_DIR)/arch/arm/boot/uImage $(INSTALL_DIR)

################################################################################
# device tree processing
################################################################################

DEVICETREE = $(TMP)/dts/devicetree.dtb

.PHONY: devicetree devicetree-install

devicetree: $(DEVICETREE)

$(DTREE_TAR): | $(DL)
	curl -L $(DTREE_URL) -o $@

$(DTREE_DIR): $(DTREE_TAR)
	mkdir -p $@
	tar -zxf $< --strip-components=1 --directory=$@
	mkdir -p fpga/tmp
	cp -r $@ fpga/tmp

$(DEVICETREE): $(DTREE_DIR) $(INSTALL_DIR)/fpga $(TMP)
	cp -r $(INSTALL_DIR)/fpga/$(FPGA_PRJ)/dts $(TMP)
	cat   $(TMP)/dts/fpga.dts >> $(TMP)/dts/system-top.dts
	cat fpga/$(FPGA_PRJ)/$(DTS_PATH)/watchdog.dtsi >> $(TMP)/dts/system-top.dts
	gcc -I $(TMP)/dts -E -nostdinc -undef -D__DTS__ -x assembler-with-cpp -o $(TMP)/dts/system-top.dts.tmp $(TMP)/dts/system-top.dts
	tools/dtc/dtc -@ -I dts -O dtb -o $(DEVICETREE) -i $(TMP)/dts -i fpga/$(FPGA_PRJ)/$(DTS_PATH) $(TMP)/dts/system-top.dts.tmp
	# create device tree source from binary for reference
	tools/dtc/dtc -I dtb -O dts --sort -o $(TMP)/dts/dtraw.dts $(DEVICETREE)

devicetree-install: $(DEVICETREE) $(INSTALL_DIR)
	cp $(DEVICETREE)                   $(INSTALL_DIR)
	cp $(TMP)/dts/dtraw.dts            $(INSTALL_DIR)

################################################################################
# boot file generator
################################################################################

BOOT = $(INSTALL_DIR)/boot.bin

.PHONY: boot

boot: $(BOOT)

FPGA = $(INSTALL_DIR)/fpga/$(FPGA_PRJ)/fpga.bit
FSBL = $(INSTALL_DIR)/fpga/$(FPGA_PRJ)/fsbl.elf

$(BOOT): $(INSTALL_DIR)/fpga $(UBOOT) $(INSTALL_DIR)
	@echo img:{[bootloader] $(FSBL) $(FPGA) $(UBOOT) } > boot_uboot.bif
	bootgen -image boot_uboot.bif -w -o $@

################################################################################
# tarball
################################################################################

ZIPFILE=ecosystem-$(VERSION).zip

zip: $(ZIPFILE)

$(ZIPFILE):
	cp -r OS/filesystem/*  $(INSTALL_DIR)
	# create version file
	@echo "$$GREET_MSG" >  $(INSTALL_DIR)/version.txt
	# build zip file
	cd $(INSTALL_DIR); zip -r ../$(ZIPFILE) *

################################################################################
#
################################################################################

clean:
	-make -C $(LINUX_DIR) clean
	make -C fpga clean
	-make -C $(UBOOT_DIR) clean
	# todo, remove downloaded libraries and symlinks
	$(RM) $(INSTALL_DIR) -rf


################################################################################
#
################################################################################


gen_report:

	./gen_fpga_report.sh BRANCH_KERNEL stream_app $(FPGA_STREAM_APP)

ifneq "$(FPGA_STREAM_APP)" ""
	./gen_fpga_report.sh GEN stream_app $(FPGA_STREAM_APP)
endif

ifneq "$(FPGA_STREAM_APP_250)" ""
	./gen_fpga_report.sh GEN stream_app_250 $(FPGA_STREAM_APP_250)
endif

ifneq "$(FPGA_CLASSIC)" ""
	./gen_fpga_report.sh GEN classic $(FPGA_CLASSIC)
endif

ifneq "$(FPGA_LOGIC)" ""
	./gen_fpga_report.sh GEN logic $(FPGA_LOGIC)
endif

ifneq "$(FPGA_LOGIC_250)" ""
	./gen_fpga_report.sh GEN logic_250 $(FPGA_LOGIC_250)
endif

ifneq "$(FPGA_0_94)" ""
	./gen_fpga_report.sh GEN v0.94 $(FPGA_0_94)
endif

ifneq "$(FPGA_0_94_250)" ""
	./gen_fpga_report.sh GEN v0.94_250 $(FPGA_0_94_250)
endif

ifneq "$(FPGA_MERCURY)" ""
	./gen_fpga_report.sh GEN mercury $(FPGA_MERCURY)
endif

ifneq "$(FPGA_AXI4LITE)" ""
	./gen_fpga_report.sh GEN axi4lite $(FPGA_AXI4LITE)
endif

	./gen_fpga_report.sh PACK
